// Sizes: width and height
// @param $value ($width);
// @param $value ($height);
//
// same values
// @include sizes(2px);
//
// different values
// @include sizes(2px, 4px);
//
@mixin sizes($width, $height:$width) {
	height: $height;
	width: $width;
}

// Border Radius
// @param $value ($radius);
// 
// @include border-rounded(2px);
// 
@mixin border-rounded($radius) {
	@include prefixer(border-radius, $radius);
}

// Prefixer
// @param $property ($name);
// @param $value ($value);
// @param $prefixes (webkit | moz | ms | o);
//
// @include prefixer(animation, $options);
//
@mixin prefixer($property, $value, $prefixes: webkit moz ms o) {
  	#{$property}: #{$value};
  	@each $prefix in $prefixes {
    	#{'-' + $prefix + '-' + $property}: #{$value};
  	}
}

@mixin box-sizing($type: border-box) {
	@include prefixer(box-sizing, border-box);
}

@mixin generate-col($col-qty, $gutter, $col-width) {
	@for $i from 2 through $col-qty {
		.col#{$i} {
			float: left;
			margin: 0 $gutter / 2;
			width: ($col-width * $i) + ($gutter * $i) - $gutter;
		}
	}
}

@mixin generate-pre-col($col-qty, $gutter, $col-width) {
    @for $i from 2 through ($col-qty - 2) {
        .pre#{$i} { 
            margin-left: ($col-width * $i) + ($gutter * $i) + ($gutter / 2);
        }
    }	
}

@mixin generate-suf-col($col-qty, $gutter, $col-width) {
    @for $i from 2 through ($col-qty - 2) {
        .suf#{$i} { 
            margin-right: ($col-width * $i) + ($gutter * $i);
        }
    }
}

@mixin generate-container($col-qty, $gutter, $col-width) {
    $wrap: ($col-width * $col-qty) + $gutter * ($col-qty - 1);

    .container {
        margin: 0 auto;
        width: $wrap + $gutter;

        &:after {
            clear: both;
            content: '';
            display: block;
        }   
    }
}

// Position
// @param $position (static | absolute | fixed | relative | initial | inherit;);
// @param $bottom;
// @param $left;
// @param $right;
// @param $top;
//
// @include position(inherit, 10px, 10px, null, null);
//
@mixin position($position: relative, $bottom: null, $left: null, $right: null, $top: null) {
    
    @if ($position != static and $position != absolute and $position != fixed and $position != relative and $position != initial and $position != inherit) {
        @error 'Position value (#{$position}) is unknown';
    }
    
    position: $position;
    
    @if ($bottom != null) {
        bottom: $bottom;
    }
    @if ($left != null) {
        left: $left;
    }
    @if ($right != null) {
        right: $right;
    }
    @if ($top != null) {
        top: $top;
    }
}