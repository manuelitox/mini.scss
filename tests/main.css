@media (min-width: 1024px) {
  html {
    font-size: 16px; } }
@media (min-width: 240px) and (max-width: 1023px) {
  html {
    font-size: 14px; } }

body {
  line-height: 1.5;
  margin: 0;
  padding: 0; }

h1 {
  font-size: 2rem;
  font-weight: normal;
  margin: 0; }

h2 {
  font-size: 1.6rem;
  font-weight: normal;
  margin: 0 0 20px; }

h3 {
  font-size: 1.4rem;
  font-weight: normal;
  margin: 0 0 10px; }

h4 {
  font-size: 0.9rem;
  font-weight: normal;
  margin: 0 0 10px; }

h5 {
  font-size: 0.7rem;
  font-weight: normal; }

p {
  margin: 0 0 20px 0; }

img {
  height: auto;
  max-width: 100%; }

figure {
  margin: 0 0 20px 0;
  padding: 0;
  text-align: center; }

figcaption {
  display: block;
  text-align: center;
  font-size: 14px; }

a {
  text-decoration: none; }
  a:hover {
    text-decoration: underline; }

/* # Darken color [function] ---------- */
/* Should return gray color and be true. */
[data-module="Darken color [function]"] [data-test="Should return gray color and be true."] .assert-equal {
  -result: PASS;
  -description: "Returns the gray color"; }

/* Should return a gray color but not equal to expected it */
[data-module="Darken color [function]"] [data-test="Should return a gray color but not equal to expected it"] .assert-unequal {
  -result: PASS;
  -description: "Returns a gray color #e6e6e6 that is different to #ccc"; }

/* # Lighten color [function] ---------- */
/* Should return the #333 color. */
[data-module="Lighten color [function]"] [data-test="Should return the #333 color."] .assert-equal {
  -result: PASS;
  -description: "Returns the #333333 color"; }

/* Should return the #1a1a1a color that is not equal to expected it */
[data-module="Lighten color [function]"] [data-test="Should return the #1a1a1a color that is not equal to expected it"] .assert-unequal {
  -result: PASS;
  -description: "Returns the #1a1a1a color that is different to #333"; }

/* # has-value [function] ---------- */
/* Should return the second value inside $args list. */
[data-module="has-value [function]"] [data-test="Should return the second value inside $args list."] .assert-equal {
  -result: PASS;
  -description: "Returns item-2"; }

/* Should return null, the value is not found or the value is empty */
[data-module="has-value [function]"] [data-test="Should return null, the value is not found or the value is empty"] .assert-true {
  -result: PASS;
  -description: "Returns null"; }

/* # map-fetch [function] ---------- */
/* Should return the color value inside $args map */
[data-module="map-fetch [function]"] [data-test="Should return the color value inside $args map"] .assert-true {
  -result: PASS;
  -description: "Returns green as the value color"; }

/* Should return null, the value is not found */
[data-module="map-fetch [function]"] [data-test="Should return null, the value is not found"] .assert-true {
  -result: PASS;
  -description: "Returns null"; }

/* # media queries options ---------- */
/* Should return the value of 'xlarge' in breakpoints variable */
[data-module="media queries options"] [data-test="Should return the value of 'xlarge' in breakpoints variable"] .assert-equal {
  -result: PASS;
  -description: ""; }

/* Should return the value of 'large' in breakpoints variable */
[data-module="media queries options"] [data-test="Should return the value of 'large' in breakpoints variable"] .assert-equal {
  -result: PASS;
  -description: ""; }

/* Should return the value of '>=small<=medium' in breakpoints variable */
[data-module="media queries options"] [data-test="Should return the value of '>=small<=medium' in breakpoints variable"] .assert-equal {
  -result: PASS;
  -description: ""; }

/* Should return the value of '>=medium' in breakpoints variable */
[data-module="media queries options"] [data-test="Should return the value of '>=medium' in breakpoints variable"] .assert-equal {
  -result: PASS;
  -description: ""; }

/* Should return the value of 'medium' in breakpoints variable */
[data-module="media queries options"] [data-test="Should return the value of 'medium' in breakpoints variable"] .assert-equal {
  -result: PASS;
  -description: ""; }

/* Should return the value of 'small' in breakpoints variable */
[data-module="media queries options"] [data-test="Should return the value of 'small' in breakpoints variable"] .assert-equal {
  -result: PASS;
  -description: ""; }

/* # breakpoint [Mixin] ---------- */
/* Outputs styles using breakpoint [Mixin] */
@media (min-width: 1024px) {
  [data-module="breakpoint [Mixin]"] [data-test="Outputs styles using breakpoint [Mixin]"] [data-assert="Outputs styles inside of the min-width: 1024px breakpoint"] .input body {
    content: 'large'; } }
@media (min-width: 1024px) {
  [data-module="breakpoint [Mixin]"] [data-test="Outputs styles using breakpoint [Mixin]"] [data-assert="Outputs styles inside of the min-width: 1024px breakpoint"] .expect body {
    content: 'large'; } }
@media (min-width: 1360px) {
  [data-module="breakpoint [Mixin]"] [data-test="Outputs styles using breakpoint [Mixin]"] [data-assert="Outputs styles inside of the min-width: 1360px breakpoint"] .input body {
    content: 'xlarge'; } }
@media (min-width: 1360px) {
  [data-module="breakpoint [Mixin]"] [data-test="Outputs styles using breakpoint [Mixin]"] [data-assert="Outputs styles inside of the min-width: 1360px breakpoint"] .expect body {
    content: 'xlarge'; } }
@media (min-width: 240px) and (max-width: 1023px) {
  [data-module="breakpoint [Mixin]"] [data-test="Outputs styles using breakpoint [Mixin]"] [data-assert="Outputs styles inside of the min-width: 240px and max-width: 1023px breakpoint"] .input body {
    content: '>=small<=medium'; } }
@media (min-width: 240px) and (max-width: 1023px) {
  [data-module="breakpoint [Mixin]"] [data-test="Outputs styles using breakpoint [Mixin]"] [data-assert="Outputs styles inside of the min-width: 240px and max-width: 1023px breakpoint"] .expect body {
    content: '>=small<=medium'; } }
@media (min-width: 600px) {
  [data-module="breakpoint [Mixin]"] [data-test="Outputs styles using breakpoint [Mixin]"] [data-assert="Outputs styles inside of the min-width: 600px breakpoint"] .input body {
    content: '>=medium'; } }
@media (min-width: 600px) {
  [data-module="breakpoint [Mixin]"] [data-test="Outputs styles using breakpoint [Mixin]"] [data-assert="Outputs styles inside of the min-width: 600px breakpoint"] .expect body {
    content: '>=medium'; } }
@media (min-width: 600px) and (max-width: 1023px) {
  [data-module="breakpoint [Mixin]"] [data-test="Outputs styles using breakpoint [Mixin]"] [data-assert="Outputs styles inside of the min-width: 600px and max-width: 1023px breakpoint"] .input body {
    content: 'medium'; } }
@media (min-width: 600px) and (max-width: 1023px) {
  [data-module="breakpoint [Mixin]"] [data-test="Outputs styles using breakpoint [Mixin]"] [data-assert="Outputs styles inside of the min-width: 600px and max-width: 1023px breakpoint"] .expect body {
    content: 'medium'; } }
@media (min-width: 240px) and (max-width: 599px) {
  [data-module="breakpoint [Mixin]"] [data-test="Outputs styles using breakpoint [Mixin]"] [data-assert="Outputs styles inside of the min-width: 240px and max-width: 599px breakpoint"] .input body {
    content: 'small'; } }
@media (min-width: 240px) and (max-width: 599px) {
  [data-module="breakpoint [Mixin]"] [data-test="Outputs styles using breakpoint [Mixin]"] [data-assert="Outputs styles inside of the min-width: 240px and max-width: 599px breakpoint"] .expect body {
    content: 'small'; } }

/* # SUMMARY ---------- */
/* 15 Tests: */
/*  - 14 Passed */
/*  - 0 Failed */
/*  - 1 Output to CSS */
/* -------------------- */

/*# sourceMappingURL=main.css.map */
