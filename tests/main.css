@charset "UTF-8";
*, *:after, *:before {
  box-sizing: border-box; }

@media (min-width: 1024px) {
  html {
    font-size: 16px; } }
@media (min-width: 240px) and (max-width: 1023px) {
  html {
    font-size: 14px; } }

body {
  line-height: 1.5;
  margin: 0;
  padding: 0; }

img {
  height: auto;
  max-width: 100%; }

figure {
  margin: 0 0 20px 0;
  padding: 0;
  text-align: center; }

figcaption {
  display: block;
  text-align: center;
  font-size: .8rem; }

/* # Module: paths variable */
/* ------------------------ */
/* Test: Should return the value of 'img' in the paths variable */
/*   ✔ Returns the ../img/ path */
/*  */
/* Test: Should return the value of 'fonts' in the paths variable */
/*   ✔ Returns the ../fonts/ path */
/*  */
/*  */
/* # Module: font-family variable */
/* ------------------------------ */
/* Test: Should return the value of 'text' in the font-family variable */
/*   ✔ Returns the arial font-family */
/*  */
/* Test: Should return the value of 'titles' in the font-family variable */
/*   ✔ Returns the arial font-family */
/*  */
/* Test: Should return the value of 'subtitles' in the font-family variable */
/*   ✔ Returns the arial font-family */
/*  */
/*  */
/* # Module: font-sizes variable */
/* ----------------------------- */
/* Test: Should return the value of 'normal' in the font-sizes variable */
/*   ✔ Returns the 16px font-family */
/*  */
/* Test: Should return the value of 'small' in the font-sizes variable */
/*   ✔ Returns the 14px font-family */
/*  */
/*  */
/* # Module: Darken color [function] */
/* --------------------------------- */
/* Test: Should return gray color and be true. */
/*   ✔ Returns the gray color */
/*  */
/* Test: Should return a gray color but not equal to expected it */
/*   ✔ Returns a gray color #e6e6e6 that is different to #ccc */
/*  */
/*  */
/* # Module: Lighten color [function] */
/* ---------------------------------- */
/* Test: Should return the #333 color. */
/*   ✔ Returns the #333333 color */
/*  */
/* Test: Should return the #1a1a1a color that is not equal to expected it */
/*   ✔ Returns the #1a1a1a color that is different to #333 */
/*  */
/*  */
/* # Module: has-value [function] */
/* ------------------------------ */
/* Test: Should return the second value inside $args list. */
/*   ✔ Returns item-2 */
/*  */
/* Test: Should return null, the value is not found or the value is empty */
/*   ✔ Returns null */
/*  */
/*  */
/* # Module: map-fetch [function] */
/* ------------------------------ */
/* Test: Should return the color value inside $args map */
/*   ✔ Returns green as the value color */
/*  */
/* Test: Should return null, the value is not found */
/*   ✔ Returns null */
/*  */
/*  */
/* # Module: get-color [function] */
/* ------------------------------ */
/* Test: Should return the color value inside $args map */
/*   ✔ Returns green as the value color */
/*  */
/* Test: Should return null, the value is not found */
/*   ✔ Returns null */
/*  */
/*  */
/* # Module: get-path [function] */
/* ----------------------------- */
/* Test: Should return the value path inside $args map */
/*   ✔ Returns ../img/ as the value path */
/*  */
/* Test: Should return null, the value is not found */
/*   ✔ Returns null */
/*  */
/*  */
/* # Module: media queries options */
/* ------------------------------- */
/* Test: Should return the value of 'xlarge' in breakpoints variable */
/*   ✔ Returns the (min-width: 1360px) value */
/*  */
/* Test: Should return the value of 'large' in breakpoints variable */
/*   ✔ Returns the (min-width: 1024px) value */
/*  */
/* Test: Should return the value of '>=small<=medium' in breakpoints variable */
/*   ✔ Returns the (min-width: 240px) and (max-width: 1023px) value */
/*  */
/* Test: Should return the value of '>=medium' in breakpoints variable */
/*   ✔ Returns the (min-width: 600px) value */
/*  */
/* Test: Should return the value of 'medium' in breakpoints variable */
/*   ✔ Returns the (min-width: 600px) and (max-width: 1023px) value */
/*  */
/* Test: Should return the value of 'small' in breakpoints variable */
/*   ✔ Returns the (min-width: 240px) and (max-width: 599px) value */
/*  */
/*  */
/* # Module: breakpoint [Mixin] */
/* ---------------------------- */
/* Test: Outputs the styles using breakpoint [Mixin] */
/*   ASSERT: Outputs the styles inside of the min-width: 1024px breakpoint   */
/*   OUTPUT   */
@media (min-width: 1024px) {
  .test-output body {
    content: 'large'; } }

/*   END_OUTPUT   */
/*   EXPECTED   */
@media (min-width: 1024px) {
  .test-output body {
    content: 'large'; } }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*   ASSERT: Outputs the styles inside of the min-width: 1360px breakpoint   */
/*   OUTPUT   */
@media (min-width: 1360px) {
  .test-output body {
    content: 'xlarge'; } }

/*   END_OUTPUT   */
/*   EXPECTED   */
@media (min-width: 1360px) {
  .test-output body {
    content: 'xlarge'; } }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*   ASSERT: Outputs the styles inside of the min-width: 240px and max-width: 1023px breakpoint   */
/*   OUTPUT   */
@media (min-width: 240px) and (max-width: 1023px) {
  .test-output body {
    content: '>=small<=medium'; } }

/*   END_OUTPUT   */
/*   EXPECTED   */
@media (min-width: 240px) and (max-width: 1023px) {
  .test-output body {
    content: '>=small<=medium'; } }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*   ASSERT: Outputs the styles inside of the min-width: 600px breakpoint   */
/*   OUTPUT   */
@media (min-width: 600px) {
  .test-output body {
    content: '>=medium'; } }

/*   END_OUTPUT   */
/*   EXPECTED   */
@media (min-width: 600px) {
  .test-output body {
    content: '>=medium'; } }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*   ASSERT: Outputs the styles inside of the min-width: 600px and max-width: 1023px breakpoint   */
/*   OUTPUT   */
@media (min-width: 600px) and (max-width: 1023px) {
  .test-output body {
    content: 'medium'; } }

/*   END_OUTPUT   */
/*   EXPECTED   */
@media (min-width: 600px) and (max-width: 1023px) {
  .test-output body {
    content: 'medium'; } }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*   ASSERT: Outputs the styles inside of the min-width: 240px and max-width: 599px breakpoint   */
/*   OUTPUT   */
@media (min-width: 240px) and (max-width: 599px) {
  .test-output body {
    content: 'small'; } }

/*   END_OUTPUT   */
/*   EXPECTED   */
@media (min-width: 240px) and (max-width: 599px) {
  .test-output body {
    content: 'small'; } }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/*  */
/* # Module: pixel ratios options */
/* ------------------------------ */
/* Test: Should return the value of 'retina-4k' in pixel-ratio variable */
/*   ✔ Returns the 4 value */
/*  */
/* Test: Should return the value of 'retina-2k' in pixel-ratio variable */
/*   ✔ Returns the 2 value */
/*  */
/* Test: Should return the value of 'normal-1.5k' in pixel-ratio variable */
/*   ✔ Returns the 1.5 value */
/*  */
/* Test: Should return the value of 'normal' in pixel-ratio variable */
/*   ✔ Returns the 1 value */
/*  */
/*  */
/* # Module: pixel-ratio [Mixin] */
/* ----------------------------- */
/* Test: Outputs the styles using pixel-ratio [Mixin] */
/*   ASSERT: Outputs the styles inside of the retina-4k ratio   */
/*   OUTPUT   */
@media only screen and (-webkit-min-device-pixel-ratio: 4), only screen and (-o-min-device-pixel-ratio: 4), only screen and (min-resolution: 384dpi), only screen and (min-resolution: 4dppx) {
  .test-output body {
    content: '4k'; } }

/*   END_OUTPUT   */
/*   EXPECTED   */
@media only screen and (-webkit-min-device-pixel-ratio: 4), only screen and (-o-min-device-pixel-ratio: 4), only screen and (min-resolution: 384dpi), only screen and (min-resolution: 4dppx) {
  .test-output body {
    content: '4k'; } }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*   ASSERT: Outputs the styles inside of the retina-2k ratio   */
/*   OUTPUT   */
@media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) {
  .test-output body {
    content: '2k'; } }

/*   END_OUTPUT   */
/*   EXPECTED   */
@media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) {
  .test-output body {
    content: '2k'; } }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*   ASSERT: Outputs the styles inside of the normal-1.5k ratio   */
/*   OUTPUT   */
@media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 1.5), only screen and (min-resolution: 144dpi), only screen and (min-resolution: 1.5dppx) {
  .test-output body {
    content: '1.5k'; } }

/*   END_OUTPUT   */
/*   EXPECTED   */
@media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 1.5), only screen and (min-resolution: 144dpi), only screen and (min-resolution: 1.5dppx) {
  .test-output body {
    content: '1.5k'; } }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*   ASSERT: Outputs the styles inside of the normal ratio   */
/*   OUTPUT   */
@media only screen and (-webkit-min-device-pixel-ratio: 1), only screen and (-o-min-device-pixel-ratio: 1), only screen and (min-resolution: 96dpi), only screen and (min-resolution: 1dppx) {
  .test-output body {
    content: '1k'; } }

/*   END_OUTPUT   */
/*   EXPECTED   */
@media only screen and (-webkit-min-device-pixel-ratio: 1), only screen and (-o-min-device-pixel-ratio: 1), only screen and (min-resolution: 96dpi), only screen and (min-resolution: 1dppx) {
  .test-output body {
    content: '1k'; } }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/*  */
/* # Module: font-face [Mixin] */
/* --------------------------- */
/* Test: Outputs the styles using font-face [Mixin] */
/*   ASSERT: Should output the appropriate styles to arial font-face   */
/*   OUTPUT   */
@font-face {
  .test-output {
    font-family: "arial";
    src: url("../fonts/arial.eot");
    src: url("../fonts/arial.eot?#iefix") format("embedded-opentype"), url("../fonts/arial.woff2") format("woff2"), url("../fonts/arial.woff") format("woff"), url("../fonts/arial.ttf") format("truetype"), url("../fonts/arial.svg#arial") format("svg");
    font-style: normal;
    font-weight: normal; } }
/*   END_OUTPUT   */
/*   EXPECTED   */
@font-face {
  .test-output {
    font-family: 'arial';
    src: url("../fonts/arial.eot");
    src: url("../fonts/arial.eot?#iefix") format("embedded-opentype"), url("../fonts/arial.woff2") format("woff2"), url("../fonts/arial.woff") format("woff"), url("../fonts/arial.ttf") format("truetype"), url("../fonts/arial.svg#arial") format("svg");
    font-style: normal;
    font-weight: normal; } }
/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/*  */
/* # Module: sizes [Mixin] */
/* ----------------------- */
/* Test: Outputs the height and width using sizes [Mixin] */
/*   ASSERT: Should outputs the appropriate styles when the mixin has only one argument.   */
/*   OUTPUT   */
.test-output {
  height: 100px;
  width: 100px; }

/*   END_OUTPUT   */
/*   EXPECTED   */
.test-output {
  height: 100px;
  width: 100px; }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*   ASSERT: Should outputs the appropriate styles when the mixin has all arguments.   */
/*   OUTPUT   */
.test-output {
  height: 150px;
  width: 100px; }

/*   END_OUTPUT   */
/*   EXPECTED   */
.test-output {
  height: 150px;
  width: 100px; }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/*  */
/* # SUMMARY ---------- */
/* 42 Tests: */
/*  - 29 Passed */
/*  - 0 Failed */
/*  - 13 Output to CSS */
/* -------------------- */

/*# sourceMappingURL=main.css.map */
